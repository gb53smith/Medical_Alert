# Medical Alert System
# By: Graham Smith
# Notes:  Tested examples of an automated voice call and a SMS text message using Twilio

homeassistant:
  # Name of the location where Home Assistant is running
  name: !secret name
  # Location required to calculate the time the sun rises and sets
  latitude: !secret latitude
  longitude: !secret longitude
  # Impacts weather/sunrise data (altitude above sea level in meters)
  elevation: !secret elevation
  # metric for Metric, imperial for Imperial
  unit_system: metric
  # Pick yours from here: http://en.wikipedia.org/wiki/List_of_tz_database_time_zones
  time_zone: !secret time_zone
  internal_url: !secret base_url
  external_url: !secret base_url
#Needed in place of discovery to get hassio menu
hassio:

system_health:

twilio:
  account_sid: !secret account_sid
  auth_token: !secret auth_token

notify:
  - name: Medical Alert Call
    platform: twilio_call
    from_number: !secret from_number
  - name: Medical Alert SMS
    platform: twilio_sms
    from_number: !secret from_number

python_script:

# Enables configuration UI
config:

# Checks for available updates
updater:

# Discover some devices automatically
#discovery:

#Need this only to debug python scripts
# logger:
  # default: info
  # logs:
    # homeassistant.components.python_scripts: debug
    # homeassistant.components.sensor.time: error

# View all events in a logbook
logbook:

# Keep database from growing too large by purging
# Must log automations to restore_state of automations on restart
recorder:
  auto_purge: true
  purge_keep_days: 7
  exclude:
    entities:
      - sensor.time
      - switch.buzzer
      - automation.low_buzzer
      - automation.fast_buzzer

# Enables support for tracking state changes over time.
# Exclude those domains and entities that do not change much 
history:
  exclude:
    domains:
      - automation
      - script
      - group
      - input_select
      - input_text
    entities:
      - sensor.time

########## HARDWARE CONNECTIONS #############
# Connect RX480R_4CH module pins to Raspberry PI I/O Pins
#  RX480R_4CH  -> Raspberry PI
#      3.3V    ->      1
#      data1   ->     11
#      data2   ->     12
# Connect Buzzer to Raspberry PI PIN 8.  Transistor driver required
# Alarm is available on Raspberry PI PIN 13 for an LED?
# These are GPIO# not PIN#
# Includes 50 msec debounce
binary_sensor:
  - platform: rpi_gpio
    ports:
      17: on_button
      18: off_button

# Alarm can be canceled by pressing the OFF button before the notify switch
# is triggered after 30 seconds.  After notify i s triggered it can be
# cancelled by pressing OFF button for 5 seconds or
# Manually sliding the alarm switch OFF from a Web Browser
# On buzzer is a physical connection
# on_sw and off_sw is for testing 
# connect 15 -> 11, 16 -> 12 for testing
# alarm and alive are to store states and have no hardware connections
switch:    
  - platform: rpi_gpio
    ports:
      14: Buzzer
      22: on_sw
      23: off_sw
      5: alarm
      6: alive

# Used to create time trigger on input_datetime
sensor:
  - platform: time_date
    display_options:
      - 'time'

#Note: Use input_text to enter phone numbers with a numeric check

input_select: 
  alarm_cancel:
    name: Alarm Cancel Options
    options:
      - 'OFF'
      - Send Message
  type1:
    name: Type 1
    options:
      - 'OFF'
      - Voice
      - Text
      - Both
  type2:
    name: Type 2
    options:
      - 'OFF'
      - Voice
      - Text
      - Both      
  type3:
    name: Type 3
    options:
      - 'OFF'
      - Voice
      - Text
      - Both      
  type4:
    name: Type 4
    options:
      - 'OFF'
      - Voice
      - Text
      - Both      

input_text:
  cancel_message:
    name: Cancel Message

  contact1:
    name: Contact Name 1  
  phone1:
    name: Phone Number 1
    min: 10
    max: 10
    pattern: '[0-9]*'
  message1:
    name: Help Message 1
    max: 500    

  contact2:
    name: Contact Name 2  
  phone2:
    name: Phone Number 2
    min: 10
    max: 10
    pattern: '[0-9]*'
  message2:
    name: Help Message 2

  contact3:
    name: Contact Name 3  
  phone3:
    name: Phone Number 3
    min: 10
    max: 10
    pattern: '[0-9]*'
  message3:
    name: Help Message 3

  contact4:
    name: Contact Name 4  
  phone4:
    name: Phone Number 4
    min: 10
    max: 10
    pattern: '[0-9]*'
  message4:
    name: Help Message 4

  alive_contact:
    name: Alive Contact  
  phone_alive:
    name: Phone Alive
    min: 10
    max: 10
    pattern: '[0-9]*'
  message_alive:
    name: Alive Message

input_boolean:
  notity_enable:
    name: Notify Enable

input_datetime:
  notify_time:
    name: Notify Time
    has_date: false
    has_time: true    

automation pre45:
  - alias: ON Button Pushed
    trigger:
      platform: state
      entity_id: binary_sensor.on_button
      to: 'on'
    condition:
      condition: state    
      entity_id: binary_sensor.off_button
      state: 'off'  
    action:
      service: homeassistant.turn_on
      entity_id: 
        - switch.alarm
        - script.alarm

  - alias: OFF Button Pushed Before Notify
    trigger:
      platform: state
      entity_id: binary_sensor.off_button
      to: 'on'
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: binary_sensor.on_button
          state: 'off'
        - condition: state      
          entity_id: automation.fast_buzzer
          state: 'off'            
    action:
      - service: homeassistant.turn_off
        entity_id: 
          - script.alarm
          - script.alarm_timer
          - switch.alarm
      - service: homeassistant.turn_on
        entity_id: 
          - switch.alive
      - service: switch.turn_on
        entity_id: 
          - switch.buzzer
      - delay:
          milliseconds: 3000
      - service: switch.turn_off
        entity_id: 
          - switch.buzzer           

  - alias: OFF Button Pushed After Notify
    trigger:
      platform: state
      entity_id: binary_sensor.off_button
      to: 'on'
      for:
        seconds: 5
    condition:
      condition: and
      conditions:
        - condition: state      
          entity_id: binary_sensor.off_button
          state: 'on'
        - condition: state      
          entity_id: automation.fast_buzzer
          state: 'on'            
    action:
      service: homeassistant.turn_off
      entity_id: 
        - script.alarm
        - script.alarm_timer
        - switch.alarm

  - alias: Slow Buzzer
    initial_state: false
    trigger:
      platform: time_pattern
      seconds: '/5'
    condition:
      condition: state    
      entity_id: automation.fast_buzzer
      state: 'off'  
    action:
      - service: switch.turn_on
        entity_id: 
          - switch.buzzer
      - delay:
          milliseconds: 1000
      - service: switch.turn_off
        entity_id: 
          - switch.buzzer    

  - alias: Fast Buzzer
    initial_state: false
    trigger:
      platform: time_pattern
      seconds: '/1'
    action:
      - service: switch.turn_on
        entity_id: 
          - switch.buzzer
      - delay:
          milliseconds: 500
      - service: switch.turn_off
        entity_id: 
          - switch.buzzer  

  - alias: Alarm OFF
    trigger:
      platform: state
      entity_id: switch.alarm
      to: 'off'
    action:
      service: homeassistant.turn_off
      entity_id:
        - switch.buzzer
        - automation.slow_buzzer
        - automation.fast_buzzer

  - alias: Contact
    trigger:
      - platform: state
        entity_id: automation.fast_buzzer
        to: 'on'
      - platform: state
        entity_id: automation.fast_buzzer
        to: 'off'      
    action:
      - service: python_script.twilio
        data:
          contacts: '4'
          delay: !secret delay
          loop: !secret loop
          voice: !secret voice
          language: !secret language
          speed: !secret speed        

# User must turn ON  switch.alive once every
# 24 hours to stop sending message_alive text
  - alias: Alive Notify
    trigger:
      platform: template
      value_template: >
        {{ (states.input_datetime.notify_time.attributes.timestamp | int
        | timestamp_custom("%H:%M", False)) == states.sensor.time.state}}
    condition:
      condition: and
      conditions:
        - condition: state      
          entity_id: switch.alive
          state: 'off'
        - condition: state      
          entity_id: input_boolean.notity_enable
          state: 'on'  
    action:
      - service: notify.medical_alert_sms
        data_template:
          message: >
            {{states('input_text.message_alive')}}
          target: >
            +1{{states('input_text.phone_alive')}}

  - alias: Alive Reset
    trigger:
      platform: template
      value_template: >
        {{ (states.input_datetime.notify_time.attributes.timestamp | int 
        | timestamp_custom("%H:%M", False)) == states.sensor.time.state}}
    action:            
      - delay: 00:00:01            
      - service: homeassistant.turn_off
        data:
          entity_id: 
            - switch.alive            

script:        
# Alarm timer is reset if ON button pushed again
  alarm:
    alias: "Resetable Alarm"
    sequence:
      - service: homeassistant.turn_off
        data:
          entity_id: 
            - script.alarm_timer
            - switch.buzzer
      - service: homeassistant.turn_on
        data:
          entity_id:
            - switch.alarm          
            - script.alarm_timer 

  alarm_timer:
    alias: "Alarm Timer"
    sequence:
      - service: homeassistant.turn_on
        data:
          entity_id: 
            - automation.slow_buzzer
      - delay:
          minutes: 0
          seconds: 30  
      - service: homeassistant.turn_off
        data:
          entity_id: 
            - automation.slow_buzzer
      - service: homeassistant.turn_on
        data:
          entity_id: 
            - automation.fast_buzzer
